WARC - Worried Archive
simple archive format

features:
* file metadata is stored twice. it's a little extra protection against corruption
* no compression. compression leads to more data loss on corruption
* crc32 hash for all files
* file size is stored as uint64_t.
* supports folders
* big magic to keep the file easy to find

==========
-- windows
==========
* windows has literally deleted people's files after its forced updates. anybody who cares about their data surely isn't using windows, so windows support isn't considered for any of this code.

==========
-- notes about the test programs
==========
* they assume GNU/Linux and therefor do no string conversion to UTF-8.

==========
-- notes about the compression library
==========
* it is recommended that you compile on a system with time_t >32bits

==========
-- format
==========
* all numbers little endian
* all strings are UTF-8. the strings you give the program through the callback functions must respect this.
  * the test program assumes GNU/Linux and therefor does no conversion.
* directory separator is '/'. only other character that can't be in filename is 0x0
	* a file at the root called bla would have its filename be "bla"
	* a file named "bla" in the folder "alb" would have its filename be "alb/bla"

#define TOPMAGIC "WORRIEDARCHIVEMAGIC"
#define WRITEVERSION 1
#define MFHMAGIC "WARCFILE"
#define TABLEMAGIC "WORRIEDTABLESTART"
#define BGFMAGIC "WARCENTRY"

section A:
<TOPMAGIC>
uint8_t <WRITEVERSION>

section B:
uint64_t archiveCreationUnixTimestamp

section C:
<MFHMAGIC>

section D:
uint64_t fileDataLength
uint16_t filenameLength
uint16_t extraCommentLength
uint64_t fileLastModifiedUnixTimestamp

section E:
char[] filename (variable length. not null terminated.)
char[] comment (variable length. not null terminated.)

section F:
<file data>

section G:
<crc32>

section H:
<TABLEMAGIC>
uint64_t fileCount;

section I:
<BGFMAGIC>

section J:
uint32_t crc32
// byte offset from start of file pointing to start of a file's header in the middle of the file. the location it points to should start with <MFHMAGIC>
uint64_t fileHeaderStartPos

------------------
-- complete format
------------------

section A;
section B;
for (all files){
	section C;
	section D;
	section E;
	section F;
	section G;
}
section H;
section B;
for(all files){
	section I;
	section D;
	section J;
	section E;
}

--------
a few extra bytes of magic is nothing. if you have a corrupted file, they'll be easier to search for.
what purpose would there be to put the crc32 BEFORE the file data? you can't possibly verify it without reading all of the data anyway.
